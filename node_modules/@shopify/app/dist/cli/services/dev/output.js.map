{"version":3,"file":"output.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/output.ts"],"names":[],"mappings":"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","sourcesContent":["import {PartnersURLs} from './urls.js'\nimport {AppInterface, isCurrentAppSchema} from '../../models/app/app.js'\nimport {OrganizationApp} from '../../models/organization.js'\nimport {getAppConfigurationShorthand} from '../../models/app/loader.js'\nimport {partnersFqdn} from '@shopify/cli-kit/node/context/fqdn'\nimport {renderConcurrent, RenderConcurrentOptions, renderInfo} from '@shopify/cli-kit/node/ui'\nimport {openURL} from '@shopify/cli-kit/node/system'\nimport {basename} from '@shopify/cli-kit/node/path'\n\nexport async function outputUpdateURLsResult(\n  updated: boolean,\n  urls: PartnersURLs,\n  remoteApp: Omit<OrganizationApp, 'apiSecretKeys' | 'apiKey'> & {apiSecret?: string},\n  localApp: AppInterface,\n) {\n  const dashboardURL = await partnersURL(remoteApp.organizationId, remoteApp.id)\n  if (remoteApp.newApp) {\n    renderInfo({\n      headline: `For your convenience, we've given your app a default URL: ${urls.applicationUrl}.`,\n      body: [\n        \"You can update your app's URL anytime in the\",\n        dashboardURL,\n        'But once your app is live, updating its URL will disrupt user access.',\n      ],\n    })\n  } else if (!updated) {\n    if (isCurrentAppSchema(localApp.configuration)) {\n      const fileName = basename(localApp.configurationPath)\n      const configName = getAppConfigurationShorthand(fileName)\n      renderInfo({\n        body: [\n          `To update URLs manually, add the following URLs to ${fileName} under auth > redirect_urls and run\\n`,\n          {\n            command: `npm run shopify app config push -- --config=${configName}`,\n          },\n          '\\n\\n',\n          {list: {items: urls.redirectUrlWhitelist}},\n        ],\n      })\n    } else {\n      renderInfo({\n        body: [\n          'To make URL updates manually, you can add the following URLs as redirects in your',\n          dashboardURL,\n          {char: ':'},\n          '\\n\\n',\n          {list: {items: urls.redirectUrlWhitelist}},\n        ],\n      })\n    }\n  }\n}\n\nexport function renderDev(renderConcurrentOptions: RenderConcurrentOptions, previewUrl: string) {\n  let options = renderConcurrentOptions\n\n  if (previewUrl) {\n    options = {\n      ...options,\n      onInput: (input, _key, exit) => {\n        if (input === 'p' && previewUrl) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          openURL(previewUrl)\n        } else if (input === 'q') {\n          exit()\n        }\n      },\n      footer: {\n        shortcuts: [\n          {\n            key: 'p',\n            action: 'preview in your browser',\n          },\n          {\n            key: 'q',\n            action: 'quit',\n          },\n        ],\n        subTitle: `Preview URL: ${previewUrl}`,\n      },\n    }\n  }\n  return renderConcurrent({...options, keepRunningAfterProcessesResolve: true})\n}\n\nasync function partnersURL(organizationId: string, appId: string) {\n  return {\n    link: {\n      label: 'Partners Dashboard',\n      url: `https://${await partnersFqdn()}/${organizationId}/apps/${appId}/edit`,\n    },\n  }\n}\n"]}