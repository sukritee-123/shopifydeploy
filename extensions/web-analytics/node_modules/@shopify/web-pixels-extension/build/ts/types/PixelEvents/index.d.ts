export interface PixelEventsCartViewedData {
    cart: Cart | null;
}
/**
 * The `cart_viewed` event logs an instance where a customer visited the cart
 * page
 */
export interface PixelEventsCartViewed {
    clientId: ClientId;
    context: Context;
    data: PixelEventsCartViewedData;
    id: Id;
    /**
     * The name of the customer event
     */
    name: 'cart_viewed';
    timestamp: Timestamp;
}
export interface PixelEventsCheckoutAddressInfoSubmittedData {
    checkout: Checkout;
}
/**
 * The `checkout_address_info_submitted` event logs an instance of a customer
 * submitting their mailing address. This event is only available in checkouts
 * where checkout extensibility for customizations is enabled
 */
export interface PixelEventsCheckoutAddressInfoSubmitted {
    clientId: ClientId;
    context: Context;
    data: PixelEventsCheckoutAddressInfoSubmittedData;
    id: Id;
    /**
     * The name of the customer event
     */
    name: 'checkout_address_info_submitted';
    timestamp: Timestamp;
}
export interface PixelEventsCheckoutCompletedData {
    checkout: Checkout;
}
/**
 * The `checkout_completed` event logs when a visitor completes a purchase. This
 * event is available on the order status and checkout pages
 */
export interface PixelEventsCheckoutCompleted {
    clientId: ClientId;
    context: Context;
    data: PixelEventsCheckoutCompletedData;
    id: Id;
    /**
     * The name of the customer event
     */
    name: 'checkout_completed';
    timestamp: Timestamp;
}
export interface PixelEventsCheckoutContactInfoSubmittedData {
    checkout: Checkout;
}
/**
 * The `checkout_contact_info_submitted` event logs an instance where a customer
 * submits a checkout form. This event is only available in checkouts where
 * checkout extensibility for customizations is enabled
 */
export interface PixelEventsCheckoutContactInfoSubmitted {
    clientId: ClientId;
    context: Context;
    data: PixelEventsCheckoutContactInfoSubmittedData;
    id: Id;
    /**
     * The name of the customer event
     */
    name: 'checkout_contact_info_submitted';
    timestamp: Timestamp;
}
export interface PixelEventsCheckoutShippingInfoSubmittedData {
    checkout: Checkout;
}
/**
 * The `checkout_shipping_info_submitted` event logs an instance where the
 * customer chooses a shipping rate. This event is only available in checkouts
 * where checkout extensibility for customizations is enabled
 */
export interface PixelEventsCheckoutShippingInfoSubmitted {
    clientId: ClientId;
    context: Context;
    data: PixelEventsCheckoutShippingInfoSubmittedData;
    id: Id;
    /**
     * The name of the customer event
     */
    name: 'checkout_shipping_info_submitted';
    timestamp: Timestamp;
}
export interface PixelEventsCheckoutStartedData {
    checkout: Checkout;
}
/**
 * The `checkout_started` event logs an instance of a customer starting the
 * checkout process. This event is available on the checkout page
 */
export interface PixelEventsCheckoutStarted {
    clientId: ClientId;
    context: Context;
    data: PixelEventsCheckoutStartedData;
    id: Id;
    /**
     * The name of the customer event
     */
    name: 'checkout_started';
    timestamp: Timestamp;
}
export interface PixelEventsCollectionViewedData {
    collection: Collection;
}
/**
 * The `collection_viewed` event logs an instance where a customer visited a
 * product collection index page. This event is available on the online store
 * page
 */
export interface PixelEventsCollectionViewed {
    clientId: ClientId;
    context: Context;
    data: PixelEventsCollectionViewedData;
    id: Id;
    /**
     * The name of the customer event
     */
    name: 'collection_viewed';
    timestamp: Timestamp;
}
export interface PixelEventsPageViewedData {
}
/**
 * The `page_viewed` event logs an instance where a customer visited a page.
 * This event is available on the online store, checkout, and order status pages
 */
export interface PixelEventsPageViewed {
    clientId: ClientId;
    context: Context;
    data: PixelEventsPageViewedData;
    id: Id;
    /**
     * The name of the customer event
     */
    name: 'page_viewed';
    timestamp: Timestamp;
}
export interface PixelEventsPaymentInfoSubmittedData {
    checkout: Checkout;
}
/**
 * The `payment_info_submitted` event logs an instance of a customer submitting
 * their payment information. This event is available on the checkout page
 */
export interface PixelEventsPaymentInfoSubmitted {
    clientId: ClientId;
    context: Context;
    data: PixelEventsPaymentInfoSubmittedData;
    id: Id;
    /**
     * The name of the customer event
     */
    name: 'payment_info_submitted';
    timestamp: Timestamp;
}
export interface PixelEventsProductAddedToCartData {
    cartLine: CartLine | null;
}
/**
 * The `product_added_to_cart` event logs an instance where a customer adds a
 * product to their cart. This event is available on the online store page
 */
export interface PixelEventsProductAddedToCart {
    clientId: ClientId;
    context: Context;
    data: PixelEventsProductAddedToCartData;
    id: Id;
    /**
     * The name of the customer event
     */
    name: 'product_added_to_cart';
    timestamp: Timestamp;
}
export interface PixelEventsProductRemovedFromCartData {
    cartLine: CartLine | null;
}
/**
 * The `product_removed_from_cart` event logs an instance where a customer
 * removes a product from their cart. This event is available on the online
 * store page
 */
export interface PixelEventsProductRemovedFromCart {
    clientId: ClientId;
    context: Context;
    data: PixelEventsProductRemovedFromCartData;
    id: Id;
    /**
     * The name of the customer event
     */
    name: 'product_removed_from_cart';
    timestamp: Timestamp;
}
export interface PixelEventsProductVariantViewedData {
    productVariant: ProductVariant;
}
/**
 * The `product_variant_viewed` event logs an instance where a customer
 * interacts with the product page and views a different variant than the
 * initial `product_viewed` impression. This event is available on the Product
 * page
 */
export interface PixelEventsProductVariantViewed {
    clientId: ClientId;
    context: Context;
    data: PixelEventsProductVariantViewedData;
    id: Id;
    /**
     * The name of the customer event
     */
    name: 'product_variant_viewed';
    timestamp: Timestamp;
}
export interface PixelEventsProductViewedData {
    productVariant: ProductVariant;
}
/**
 * The `product_viewed` event logs an instance where a customer visited a
 * product details page. This event is available on the product page
 */
export interface PixelEventsProductViewed {
    clientId: ClientId;
    context: Context;
    data: PixelEventsProductViewedData;
    id: Id;
    /**
     * The name of the customer event
     */
    name: 'product_viewed';
    timestamp: Timestamp;
}
export interface PixelEventsSearchSubmittedData {
    searchResult: SearchResult;
}
/**
 * The `search_submitted` event logs an instance where a customer performed a
 * search on the storefront. This event is available on the online store page
 */
export interface PixelEventsSearchSubmitted {
    clientId: ClientId;
    context: Context;
    data: PixelEventsSearchSubmittedData;
    id: Id;
    /**
     * The name of the customer event
     */
    name: 'search_submitted';
    timestamp: Timestamp;
}
export interface PixelEvents {
    /**
     * The `cart_viewed` event logs an instance where a customer visited the cart
     * page
     */
    cart_viewed: PixelEventsCartViewed;
    /**
     * The `checkout_address_info_submitted` event logs an instance of a customer
     * submitting their mailing address. This event is only available in checkouts
     * where checkout extensibility for customizations is enabled
     */
    checkout_address_info_submitted: PixelEventsCheckoutAddressInfoSubmitted;
    /**
     * The `checkout_completed` event logs when a visitor completes a purchase.
     * This event is available on the order status and checkout pages
     */
    checkout_completed: PixelEventsCheckoutCompleted;
    /**
     * The `checkout_contact_info_submitted` event logs an instance where a
     * customer submits a checkout form. This event is only available in checkouts
     * where checkout extensibility for customizations is enabled
     */
    checkout_contact_info_submitted: PixelEventsCheckoutContactInfoSubmitted;
    /**
     * The `checkout_shipping_info_submitted` event logs an instance where the
     * customer chooses a shipping rate. This event is only available in checkouts
     * where checkout extensibility for customizations is enabled
     */
    checkout_shipping_info_submitted: PixelEventsCheckoutShippingInfoSubmitted;
    /**
     * The `checkout_started` event logs an instance of a customer starting the
     * checkout process. This event is available on the checkout page
     */
    checkout_started: PixelEventsCheckoutStarted;
    /**
     * The `collection_viewed` event logs an instance where a customer visited a
     * product collection index page. This event is available on the online store
     * page
     */
    collection_viewed: PixelEventsCollectionViewed;
    /**
     * The `page_viewed` event logs an instance where a customer visited a page.
     * This event is available on the online store, checkout, and order status
     * pages
     */
    page_viewed: PixelEventsPageViewed;
    /**
     * The `payment_info_submitted` event logs an instance of a customer
     * submitting their payment information. This event is available on the
     * checkout page
     */
    payment_info_submitted: PixelEventsPaymentInfoSubmitted;
    /**
     * The `product_added_to_cart` event logs an instance where a customer adds a
     * product to their cart. This event is available on the online store page
     */
    product_added_to_cart: PixelEventsProductAddedToCart;
    /**
     * The `product_removed_from_cart` event logs an instance where a customer
     * removes a product from their cart. This event is available on the online
     * store page
     */
    product_removed_from_cart: PixelEventsProductRemovedFromCart;
    /**
     * The `product_variant_viewed` event logs an instance where a customer
     * interacts with the product page and views a different variant than the
     * initial `product_viewed` impression. This event is available on the Product
     * page
     */
    product_variant_viewed: PixelEventsProductVariantViewed;
    /**
     * The `product_viewed` event logs an instance where a customer visited a
     * product details page. This event is available on the product page
     */
    product_viewed: PixelEventsProductViewed;
    /**
     * The `search_submitted` event logs an instance where a customer performed a
     * search on the storefront. This event is available on the online store page
     */
    search_submitted: PixelEventsSearchSubmitted;
}
/**
 * Custom attributes left by the customer to the merchant, either in their cart
 * or during checkout.
 */
export interface Attribute {
    /**
     * The key for the attribute.
     */
    key: string;
    /**
     * The value for the attribute.
     */
    value: string;
}
/**
 * This object replaces the native document.cookie API and provides a
 * setter/getter to set cookies on the top frame.
 */
export interface BrowserCookie {
    /**
     * An asynchronous method to get a specific cookie by name. Takes a cookie
     * name of type `string` and returns the cookie value as a `string`
     */
    get: (name?: string) => Promise<string>;
    /**
     * An asynchronous method to set a cookie by name. It
     * takes two arguments, a string of form `key=value`
     * as [decribed here](https://developer.mozilla.org/en-
     * US/docs/Web/API/Document/cookie#write_a_new_cookie) or the name of the
     * cookie as the first argument and the value as the second argument.
     */
    set: (cookieOrName: string, value?: string) => Promise<string>;
}
export interface BrowserLocalStorage {
    /**
     * When invoked, will empty all keys out of the storage.
     */
    clear: () => Promise<ReturnType<WindowLocalStorage['localStorage']['clear']>>;
    /**
     * When passed a key name, will return that key's value.
     */
    getItem: (key: string) => Promise<ReturnType<WindowLocalStorage['localStorage']['getItem']>>;
    /**
     * When passed a number n, this method will return the name of the nth key in
     * the storage.
     */
    key: (index: number) => Promise<ReturnType<WindowLocalStorage['localStorage']['key']>>;
    /**
     * Returns an integer representing the number of data items stored in the
     * Storage object.
     */
    length: () => Promise<WindowLocalStorage['localStorage']['length']>;
    /**
     * When passed a key name, will remove that key from the storage.
     */
    removeItem: (key: string) => Promise<ReturnType<WindowLocalStorage['localStorage']['removeItem']>>;
    /**
     * When passed a key name and value, will add that key to the storage, or
     * update that key's value if it already exists.
     */
    setItem: (key: string, value: any) => Promise<ReturnType<WindowLocalStorage['localStorage']['setItem']>>;
}
export interface BrowserSessionStorage {
    /**
     * When invoked, will empty all keys out of the storage.
     */
    clear: () => Promise<ReturnType<WindowSessionStorage['sessionStorage']['clear']>>;
    /**
     * When passed a key name, will return that key's value.
     */
    getItem: (key: string) => Promise<ReturnType<WindowSessionStorage['sessionStorage']['getItem']>>;
    /**
     * When passed a number n, this method will return the name of the nth key in
     * the storage.
     */
    key: (index: number) => Promise<ReturnType<WindowSessionStorage['sessionStorage']['key']>>;
    /**
     * Returns an integer representing the number of data items stored in the
     * Storage object.
     */
    length: () => Promise<WindowSessionStorage['sessionStorage']['length']>;
    /**
     * When passed a key name, will remove that key from the storage.
     */
    removeItem: (key: string) => Promise<ReturnType<WindowSessionStorage['sessionStorage']['removeItem']>>;
    /**
     * When passed a key name and value, will add that key to the storage, or
     * update that key's value if it already exists.
     */
    setItem: (key: string, value: any) => Promise<ReturnType<WindowSessionStorage['sessionStorage']['setItem']>>;
}
export interface Browser {
    /**
     * This object replaces the native document.cookie API and provides a
     * setter/getter to set cookies on the top frame.
     */
    cookie: BrowserCookie;
    localStorage: BrowserLocalStorage;
    /**
     * The navigator.sendBeacon() method asynchronously sends an HTTP POST request
     * containing a small amount of data to a web server.
     */
    sendBeacon: (url: string, body?: string) => Promise<boolean>;
    sessionStorage: BrowserSessionStorage;
}
/**
 * A cart represents the merchandise that a customer intends to purchase, and
 * the estimated cost associated with the cart.
 */
export interface Cart {
    /**
     * The estimated costs that the customer will pay at checkout.
     */
    cost: CartCost;
    /**
     * A globally unique identifier.
     */
    id: string;
    lines: CartLine[];
    /**
     * The total number of items in the cart.
     */
    totalQuantity: number;
}
/**
 * The costs that the customer will pay at checkout. It uses
 * [`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartb
 * uyeridentity) to determine [international pricing](https://shopify.dev/custom-
 * storefronts/internationalization/international-pricing#create-a-cart).
 */
export interface CartCost {
    /**
     * The total amount for the customer to pay.
     */
    totalAmount: MoneyV2;
}
/**
 * Information about the merchandise in the cart.
 */
export interface CartLine {
    /**
     * The cost of the merchandise that the customer will pay for at checkout. The
     * costs are subject to change and changes will be reflected at checkout.
     */
    cost: CartLineCost;
    /**
     * The merchandise that the buyer intends to purchase.
     */
    merchandise: ProductVariant;
    /**
     * The quantity of the merchandise that the customer intends to purchase.
     */
    quantity: number;
}
/**
 * The cost of the merchandise line that the customer will pay at checkout.
 */
export interface CartLineCost {
    /**
     * The total cost of the merchandise line.
     */
    totalAmount: MoneyV2;
}
/**
 * A container for all the information required to add items to checkout and
 * pay.
 */
export interface Checkout {
    attributes: Attribute[];
    /**
     * The three-letter code that represents the currency, for example, USD.
     * Supported codes include standard ISO 4217 codes, legacy codes, and non-
     * standard codes.
     */
    currencyCode: string;
    discountApplications: DiscountApplication[];
    /**
     * The email attached to this checkout.
     */
    email: string | null;
    lineItems: CheckoutLineItem[];
    /**
     * The resulting order from a paid checkout.
     */
    order: Order | null;
    /**
     * A unique phone number for the customer. Formatted using E.164 standard. For
     * example, *+16135551111*.
     */
    phone: string | null;
    /**
     * The shipping address to where the line items will be shipped.
     */
    shippingAddress: MailingAddress | null;
    /**
     * Once a shipping rate is selected by the customer it is transitioned to a
     * `shipping_line` object.
     */
    shippingLine: ShippingRate | null;
    /**
     * The price at checkout before duties, shipping, and taxes.
     */
    subtotalPrice: MoneyV2;
    /**
     * A unique identifier for a particular checkout.
     */
    token: string;
    /**
     * The sum of all the prices of all the items in the checkout, including
     * duties, taxes, and discounts.
     */
    totalPrice: MoneyV2;
    /**
     * The sum of all the taxes applied to the line items and shipping lines in
     * the checkout.
     */
    totalTax: MoneyV2;
}
/**
 * A single line item in the checkout, grouped by variant and attributes.
 */
export interface CheckoutLineItem {
    discountAllocations: DiscountAllocation[];
    /**
     * A globally unique identifier.
     */
    id: string;
    /**
     * The quantity of the line item.
     */
    quantity: number;
    /**
     * The title of the line item. Defaults to the product's title.
     */
    title: string | null;
    /**
     * Product variant of the line item.
     */
    variant: ProductVariant | null;
}
/**
 * The client-side ID of the customer, provided by Shopify
 */
export type ClientId = string;
/**
 * A collection is a group of products that a shop owner can create to organize
 * them or make their shops easier to browse.
 */
export interface Collection {
    /**
     * A globally unique identifier.
     */
    id: string;
    productVariants: ProductVariant[];
    /**
     * The collection’s name. Maximum length: 255 characters.
     */
    title: string;
}
/**
 * A snapshot of various read-only properties of the browser at the time of
 * event
 */
export interface Context {
    /**
     * Snapshot of a subset of properties of the `document` object in the top
     * frame of the browser
     */
    document: WebPixelsDocument;
    /**
     * Snapshot of a subset of properties of the `navigator` object in the top
     * frame of the browser
     */
    navigator: WebPixelsNavigator;
    /**
     * Snapshot of a subset of properties of the `window` object in the top frame
     * of the browser
     */
    window: WebPixelsWindow;
}
/**
 * A free-form object representing data specific to a custom event provided by
 * the custom event publisher
 */
export type CustomData = Record<string, unknown>;
/**
 * This event represents any custom events emitted by partners or merchants via
 * the `publish` method
 */
export interface CustomEvent {
    clientId: ClientId;
    context: Context;
    customData: CustomData | null;
    id: Id;
    /**
     * Arbitrary name of the custom event
     */
    name: string;
    timestamp: Timestamp;
}
/**
 * A customer represents a customer account with the shop. Customer accounts
 * store contact information for the customer, saving logged-in customers the
 * trouble of having to provide it at every checkout.
 */
export interface Customer {
    /**
     * The customer’s email address.
     */
    email: string | null;
    /**
     * The customer’s first name.
     */
    firstName: string | null;
    /**
     * The ID of the customer.
     */
    id: string;
    /**
     * The customer’s last name.
     */
    lastName: string | null;
    /**
     * The total number of orders that the customer has placed.
     */
    ordersCount: number | null;
    /**
     * The customer’s phone number.
     */
    phone: string | null;
}
/**
 * A free-form object representing data specific to this event provided by
 * Shopify. Refer to [standard events](#standard-events) for details on the
 * payload available to each event
 */
export type Data = Record<string, unknown>;
/**
 * The discount that has been applied to the checkout line item.
 */
export interface DiscountAllocation {
    /**
     * The monetary value with currency allocated to the discount.
     */
    amount: MoneyV2;
    /**
     * The information about the intent of the discount.
     */
    discountApplication: DiscountApplication;
}
/**
 * The information about the intent of the discount.
 */
export interface DiscountApplication {
    /**
     * The method by which the discount's value is applied to its entitled items.
     */
    allocationMethod: string;
    /**
     * How the discount amount is distributed on the discounted lines.
     */
    targetSelection: string;
    /**
     * The type of line (i.e. line item or shipping line) on an order that the
     * discount is applicable towards.
     */
    targetType: string;
    /**
     * The customer-facing name of the discount.
     */
    title: string;
    /**
     * The type of the discount.
     */
    type: string;
    /**
     * The value of the discount. Fixed discounts return a `Money` Object, while
     * Percentage discounts return a `PricingPercentageValue` object.
     */
    value: MoneyV2 | PricingPercentageValue;
}
/**
 * The ID of the customer event
 */
export type Id = string;
/**
 * An image resource.
 */
export interface Image {
    /**
     * The location of the image as a URL.
     */
    src: string;
}
export interface InitData {
    cart: Cart | null;
    checkout: Checkout | null;
    customer: Customer | null;
    productVariants: ProductVariant[] | null;
}
/**
 * A snapshot of a subset of properties of the `location` object in the top
 * frame of the browser
 */
export interface Location {
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
     * string containing a `'#'` followed by the fragment identifier of the URL
     */
    hash: string;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
     * string containing the host, that is the hostname, a `':'`, and the port of
     * the URL
     */
    host: string;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
     * string containing the domain of the URL
     */
    hostname: string;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
     * string containing the entire URL
     */
    href: string;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
     * string containing the canonical form of the origin of the specific location
     */
    origin: string;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
     * string containing an initial `'/'` followed by the path of the URL, not
     * including the query string or fragment
     */
    pathname: string;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
     * string containing the port number of the URL
     */
    port: string;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
     * string containing the protocol scheme of the URL, including the final `':'`
     */
    protocol: string;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
     * string containing a `'?'` followed by the parameters or "querystring" of
     * the URL
     */
    search: string;
}
/**
 * A mailing address for customers and shipping.
 */
export interface MailingAddress {
    /**
     * The first line of the address. This is usually the street address or a P.O.
     * Box number.
     */
    address1: string | null;
    /**
     * The second line of the address. This is usually an apartment, suite, or
     * unit number.
     */
    address2: string | null;
    /**
     * The name of the city, district, village, or town.
     */
    city: string | null;
    /**
     * The name of the country.
     */
    country: string | null;
    /**
     * The two-letter code that represents the country, for example, US.
     * The country codes generally follows ISO 3166-1 alpha-2 guidelines.
     */
    countryCode: string | null;
    /**
     * The customer’s first name.
     */
    firstName: string | null;
    /**
     * The customer’s last name.
     */
    lastName: string | null;
    /**
     * The phone number for this mailing address as entered by the customer.
     */
    phone: string | null;
    /**
     * The region of the address, such as the province, state, or district.
     */
    province: string | null;
    /**
     * The two-letter code for the region.
     * For example, ON.
     */
    provinceCode: string | null;
    /**
     * The ZIP or postal code of the address.
     */
    zip: string | null;
}
/**
 * A monetary value with currency.
 */
export interface MoneyV2 {
    /**
     * The decimal money amount.
     */
    amount: number;
    /**
     * The three-letter code that represents the currency, for example, USD.
     * Supported codes include standard ISO 4217 codes, legacy codes, and non-
     * standard codes.
     */
    currencyCode: string;
}
/**
 * The name of the customer event
 */
export type Name = string;
/**
 * An order is a customer’s completed request to purchase one or more products
 * from a shop. An order is created when a customer completes the checkout
 * process.
 */
export interface Order {
    /**
     * The ID of the order.
     */
    id: string;
}
/**
 * A value given to a customer when a discount is applied to an order. The
 * application of a discount with this value gives the customer the specified
 * percentage off a specified item.
 */
export interface PricingPercentageValue {
    /**
     * The percentage value of the object.
     */
    percentage: number;
}
/**
 * A product is an individual item for sale in a Shopify store.
 */
export interface Product {
    /**
     * The ID of the product.
     */
    id: string;
    /**
     * The product’s title.
     */
    title: string;
    /**
     * The [product
     * type](https://help.shopify.com/en/manual/products/details/product-type)
     * specified by the merchant.
     */
    type: string | null;
    /**
     * The product’s untranslated title.
     */
    untranslatedTitle: string;
    /**
     * The product’s vendor name.
     */
    vendor: string;
}
/**
 * A product variant represents a different version of a product, such as
 * differing sizes or differing colors.
 */
export interface ProductVariant {
    /**
     * A globally unique identifier.
     */
    id: string;
    /**
     * Image associated with the product variant. This field falls back to the
     * product image if no image is available.
     */
    image: Image | null;
    /**
     * The product variant’s price.
     */
    price: MoneyV2;
    /**
     * The product object that the product variant belongs to.
     */
    product: Product;
    /**
     * The SKU (stock keeping unit) associated with the variant.
     */
    sku: string | null;
    /**
     * The product variant’s title.
     */
    title: string;
    /**
     * The product variant’s untranslated title.
     */
    untranslatedTitle: string;
}
/**
 * An object that contains the metadata of when a search has been performed.
 */
export interface SearchResult {
    productVariants: ProductVariant[];
    /**
     * The search query that was executed
     */
    query: string;
}
/**
 * A shipping rate to be applied to a checkout.
 */
export interface ShippingRate {
    /**
     * Price of this shipping rate.
     */
    price: MoneyV2;
}
/**
 * The timestamp of when the customer event occurred, in [ISO
 * 8601](https://en.wikipedia.org/wiki/ISO_8601) format
 */
export type Timestamp = string;
/**
 * A snapshot of a subset of properties of the `document` object in the top
 * frame of the browser
 */
export interface WebPixelsDocument {
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document),
     * returns the character set being used by the document
     */
    characterSet: string;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document),
     * returns the URI of the current document
     */
    location: Location;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document),
     * returns the URI of the page that linked to this page
     */
    referrer: string;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document),
     * returns the title of the current document
     */
    title: string;
}
/**
 * A snapshot of a subset of properties of the `navigator` object in the top
 * frame of the browser
 */
export interface WebPixelsNavigator {
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Navigator),
     * returns `false` if setting a cookie will be ignored and true otherwise
     */
    cookieEnabled: boolean;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Navigator),
     * returns a string representing the preferred language of the user, usually
     * the language of the browser UI. The `null` value is returned when this
     * is unknown
     */
    language: string;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Navigator),
     * returns an array of strings representing the languages known to the user,
     * by order of preference
     */
    languages: ReadonlyArray<string>;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Navigator),
     * returns the user agent string for the current browser
     */
    userAgent: string;
}
/**
 * A snapshot of a subset of properties of the `window` object in the top frame
 * of the browser
 */
export interface WebPixelsWindow {
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window),
     * gets the height of the content area of the browser window including, if
     * rendered, the horizontal scrollbar
     */
    innerHeight: number;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), gets
     * the width of the content area of the browser window including, if rendered,
     * the vertical scrollbar
     */
    innerWidth: number;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), the
     * location, or current URL, of the window object
     */
    location: Location;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), the
     * global object's origin, serialized as a string
     */
    origin: string;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), gets
     * the height of the outside of the browser window
     */
    outerHeight: number;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), gets
     * the width of the outside of the browser window
     */
    outerWidth: number;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), an
     * alias for window.scrollX
     */
    pageXOffset: number;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), an
     * alias for window.scrollY
     */
    pageYOffset: number;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), the
     * horizontal distance from the left border of the user's browser viewport to
     * the left side of the screen
     */
    screenX: number;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), the
     * vertical distance from the top border of the user's browser viewport to the
     * top side of the screen
     */
    screenY: number;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), the
     * number of pixels that the document has already been scrolled horizontally
     */
    scrollX: number;
    /**
     * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), the
     * number of pixels that the document has already been scrolled vertically
     */
    scrollY: number;
}
//# sourceMappingURL=index.d.ts.map